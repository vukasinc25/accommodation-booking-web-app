version: "3.8"

services:
  auth-service:
    image: auth-service
    hostname: auth-service
    build:
      context: .
      dockerfile: ./auth-service/Dockerfile
    restart: always
    environment:
      PORT: ${AUTH_SERVICE_PORT}
      MONGO_DB_URI: ${MONGO_DB_URI}
    depends_on:
      nats:
        condition: service_started
      mongo:
        condition: service_healthy
    networks:
      - network

  prof-service:
    image: prof-service
    hostname: prof-service
    build:
      context: .
      dockerfile: ./prof-service/Dockerfile
    restart: always
    environment:
      PORT: ${PROF_SERVICE_PORT}
      PROF_DB: ${PROF_DB}
      PROF_DB_PORT: ${PROF_DB_PORT}
    depends_on:
      nats:
        condition: service_started
      consul:
        condition: service_healthy
    networks:
      - network

  accommodation-service:
    image: accommodation-service
    hostname: ${ACCOMMODATIONS_SERVICE_HOST}
    build:
      context: .
      dockerfile: ./accommodation-service/Dockerfile
    restart: always
    environment:
      HOST: ${ACCOMMODATIONS_SERVICE_HOST}
      PORT: ${ACCOMMODATIONS_SERVICE_PORT}
      MONGO_DB_URI: ${MONGO_DB_URI}
    depends_on:
      nats:
        condition: service_started
      mongo:
        condition: service_healthy
    networks:
      - network

  reservation-service:
    build:
      context: .
      dockerfile: ./reservation-service/Dockerfile
    restart: always
    # container_name: "reservation-service"
    image: reservation-service
    hostname: reservation-service
    ports:
      - 8000:8000
    environment:
      # - PORT=8000
      - CASS_DB=cassandra:9042
    depends_on:
      cassandra:
        condition: service_healthy
    networks:
      - network

  api_gateway:
    build:
      context: ./api-gateway/
      dockerfile: Dockerfile
    container_name: api-gateway
    restart: on-failure
    ports:
      - ${GATEWAY_PORT}:${GATEWAY_PORT}
    depends_on:
      - auth-service
      - accommodation-service
      - prof-service
      - reservation-service
    networks:
      - network

  nats:
    image: nats
    container_name: nats
    ports:
      - "4222:4222"
    restart: on-failure
    networks:
      - network

  # NOSQL: MongoDB
  mongo:
    image: mongo
    hostname: mongo
    restart: on-failure
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: pass
      MONGO_INITDB_DATABASE: mongoDemo
    # Docker healtcheck - checks if database is "alive"
    healthcheck:
      test: echo 'db.runCommand("ping").ok'
      interval: 10s
      timeout: 10s
      retries: 10
    volumes:
      - mongo_store:/data/db
    networks:
      - network

  # NoSQL: MognoExpress
  mongo-express:
    image: mongo-express
    restart: always
    environment:
      # hostname of mongo databse
      - ME_CONFIG_MONGODB_SERVER=mongo
      - ME_CONFIG_MONGODB_ADMINUSERNAME=root
      - ME_CONFIG_MONGODB_ADMINPASSWORD=pass
      - ME_CONFIG_BASICAUTH_USERNAME=admin
      - ME_CONFIG_BASICAUTH_PASSWORD=admin
    depends_on:
      - mongo
    ports:
      - "8081:8081"
    volumes:
      - mongo_express_data:/data/db
    networks:
      - network

    # NoSQL: CassandraDB
  cassandra:
    image: cassandra
    restart: always
    ports:
      - "9042:9042"
    healthcheck:
      test: ["CMD-SHELL", "cqlsh -e 'describe cluster'"]
      interval: 15s
      timeout: 5s
      retries: 15
    volumes:
      - cass_store:/var/lib/cassandra/data
    # environment:
    #    - CASSANDRA_RPC_ADDRESS=cassandra
    #    - CASSANDRA_BROADCAST_ADDRESS=cassandra
    #    - CASSANDRA_LISTEN_ADDRESS=cassandra
    networks:
      - network

  # NoSQL: Consul
  consul:
    image: hashicorp/consul:latest
    ports:
      - "8500:8500"
      - "8600:8600/tcp"
      - "8600:8600/udp"
    healthcheck:
      test: ["CMD", "consul", "members"]
      interval: 10s
      timeout: 10s
      retries: 10
    command: "agent -server -ui -node=server-1 -bootstrap-expect=1 -client=0.0.0.0"
    volumes:
      # NoSQL
      # <path_to_where_to_store_data_on_host_machine>:<database_specific_data_location>
      - ./cosnul_store:/consul/data
    networks:
      - network

volumes:
  mongo_store:
  mongo_express_data:
  cass_store:
  cosnul_store:

networks:
  network:
    driver: bridge
